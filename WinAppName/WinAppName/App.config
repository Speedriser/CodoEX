<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<appSettings>
		<add key="User" value="testuser" />
		<add key="CommandTimeout" value="300" />
	</appSettings>
	<connectionStrings>
		<add
			name="AppNameDB"
			connectionString="Data Source=(local);Integrated Security=SSPI;database=TemplateDB;Connection Timeout=30;"
			providerName="System.Data.SqlClient"
		/>
		<!--
			Standard Security
			connectionString="Data Source=myServerAddress;Initial Catalog=Template1;User Id=myUsername;Password=myPassword;"
			Use serverName\instanceName as Data Source to connect to a specific SQL Server instance.
			For SQL Server 2005 Express, use Servername\SQLEXPRESS as Data Source.

			Standard Security alternative syntax
			connectionString="Server=myServerAddress;Database=Template1;User ID=myUsername;Password=myPassword;Trusted_Connection=False"

			Trusted Connection
			connectionString="Data Source=myServerAddress;Initial Catalog=Template1;Integrated Security=SSPI;"

			Trusted Connection alternative syntax
			connectionString="Server=myServerAddress;Database=Template1;Trusted_Connection=True;"

			Connecting to an SQL Server instance
			connectionString="Server=myServerName\theInstanceName;Database=Template1;Trusted_Connection=True;"

			Connect via an IP address
			connectionString="Data Source=190.190.200.100,1433;Network Library=DBMSSOCN;Initial Catalog=Template1;User ID=myUsername;Password=myPassword;"
			DBMSSOCN=TCP/IP. This is how to use TCP/IP instead of Named Pipes. At the end of the Data Source is the port to use. 1433 is the default port for SQL Server.
			Network Library options:
			DBNMPNTW Named Pipes
			DBMSLPCN Shared Memory (local machine connections only, might fail when moving to production...)
			DBMSSOCN Winsock TCP/IP
			DBMSSPXN SPX/IPX
			DBMSVINN Banyan Vines
			DBMSRPCN Multi-Protocol (Windows RPC)
			DBMSADSN Apple Talk
			DBMSGNET VIA

			Enabling MARS (multiple active result sets)
			connectionString="Server=myServerAddress;Database=Template1;Trusted_Connection=True; MultipleActiveResultSets=true;"

			Attach a database file on connect to a local SQL Server Express instance
			connectionString="Server=.\SQLExpress;AttachDbFilename=c:\mydbfile.mdf;Database=dbname; Trusted_Connection=Yes;"
			Why is the Database parameter needed? If the named database have already been attached, SQL Server does not reattach it. It uses the attached database as the default for the connection.

			Attach a database file, located in the data directory, on connect to a local SQL Server Express instance
			connectionString="Server=.\SQLExpress;AttachDbFilename=|DataDirectory|mydbfile.mdf; Database=Template1;Trusted_Connection=Yes;"

			Using an User Instance on a local SQL Server Express instance
			The User Instance functionality creates a new SQL Server instance on the fly during connect. This works only on a local SQL Server 2005 instance and only when connecting using windows authentication over local named pipes. The purpose is to be able to create a full rights SQL Server instance to a user with limited administrative rights on the computer.
			connectionString="Data Source=.\SQLExpress;Integrated Security=true; AttachDbFilename=|DataDirectory|\mydb.mdf;User Instance=true;"
			To use the User Instance functionality you need to enable it on the SQL Server. This is done by executing the following command: sp_configure 'user instances enabled', '1'. To disable the functionality execute sp_configure 'user instances enabled', '0'.

			Database mirroring
			If you connect with ADO.NET or the SQL Native Client to a database that is being mirrored, your application can take advantage of the drivers ability to automatically redirect connections when a database mirroring failover occurs. You must specify the initial principal server and database in the connection string and the failover partner server.
			connectionString="Data Source=myServerAddress;Failover Partner=myMirrorServerAddress;Initial Catalog=Template1;Integrated Security=True;"
			There is of course many other ways to write the connection string using database mirroring, this is just one example pointing out the failover functionality. You can combine this with the other connection strings options available.

			Asynchronous processing
			connectionString="Server=myServerAddress;Database=Template1;Integrated Security=True;Asynchronous Processing=True;"
		-->
	</connectionStrings>
</configuration>
